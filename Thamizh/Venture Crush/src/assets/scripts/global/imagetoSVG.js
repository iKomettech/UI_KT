const cache = {}; !function (t) { function e(k) { const e = t(this), i = e.attr("src"); if (!cache[i]) { const e = t.Deferred(); t.get(i, function (i) { e.resolve(t(i).find("svg")) }), cache[i] = e.promise() } cache[i].then(function (i) { const r = t(i).clone(); e.attr("id") && r.attr("id", e.attr("id") + "-" + i) && r.find("path").attr("id", "path-" + e.attr("id") + "-" + r[0]) && r.find("g").attr("id", "path-" + e.attr("id") + "-" + r[0]),e.attr("class")&&r.attr("class",e.attr("class")),e.attr("width")&&(r.attr("width",e.attr("width")),e.attr("height")||r.removeAttr("height")),e.attr("height")&&(r.attr("height",e.attr("height")),e.attr("width")||r.removeAttr("width")),r.insertAfter(e),e.trigger("svgInlined",r[0]),e.remove()})}t.fn.inlineSvg=function(){return this.each(e),this}}(jQuery),$(".imagetoSVG").inlineSvg();